import requests
from collections import defaultdict
from typing import List, Dict, Any, Optional


class SpacePoint:
    """Represents a quantized point in space with associated data and context."""

    def __init__(self, point_id: str, data: List[float]):
        self.point_id = point_id  # Unique identifier for the space point
        self.data = data  # Quantized data associated with this space point
        self.metadata = {}  # Placeholder for any additional metadata
        self.enclosed_space = []  # Contextual information for the space point

    def add_metadata(self, key: str, value: Any):
        """Add metadata to the space point."""
        self.metadata[key] = value

    def add_to_enclosed_space(self, value: str):
        """Add a contextual value to the enclosed space."""
        self.enclosed_space.append(value)

    def factor_data(self) -> str:
        """Factor the data into an absolute representation using '|' for grouping."""
        data_representation = "|".join(map(str, self.data))
        metadata_representation = "|".join(f"{k}:{v}" for k, v in self.metadata.items())
        enclosed_space_representation = "|".join(self.enclosed_space)
        
        return (f"PointID: {self.point_id} | Data: {data_representation} | "
                f"Metadata: {metadata_representation} | EnclosedSpace: {enclosed_space_representation}")

    def __repr__(self) -> str:
        return (f"SpacePoint(id={self.point_id}, data={self.data}, "
                f"metadata={self.metadata}, enclosed_space={self.enclosed_space})")


class CorrelationModule:
    """Handles the correlation of data with relevant materials and motions."""
    
    def __init__(self):
        # Define materials and their motion correlations
        self.correlation_data = {
            "temperature": {
                "material": "thermometer",
                "motion": "thermometric expansion"
            },
            "humidity": {
                "material": "hygrometer",
                "motion": "water vapor condensation"
            },
            "wind_speed": {
                "material": "anemometer",
                "motion": "wind turbine rotation"
            }
            # Additional correlations can be added here
        }

    def correlate(self, analyzed_data: Dict[str, float]) -> Dict[str, Dict[str, str]]:
        """Correlate analyzed data with materials and motions."""
        return {key: self.correlation_data.get(key, {"material": "N/A", "motion": "N/A"}) for key in analyzed_data}


class SpaceAcknowledgementProgram:
    """Main program to manage quantized points, analyze data, and provide correlations."""
    
    def __init__(self, quantization_factor: int = 10):
        self.quantization_factor = quantization_factor
        self.space_points: Dict[str, SpacePoint] = {}  # Store multiple SpacePoint instances
        self.correlation_module = CorrelationModule()  # Initialize the correlation module

    def gather_data(self) -> List[float]:
        """Prompt user for data input and return it as a list of floats."""
        raw_input = input("Enter comma-separated values for the quantized point (e.g., 10,20,30): ")
        try:
            data = list(map(float, raw_input.split(',')))
            return data
        except ValueError:
            print("Error: Please enter valid numerical values.")
            return []

    def quantize_data(self, data: List[float]) -> List[float]:
        """Quantize the given data based on the specified quantization factor."""
        if not all(isinstance(i, (int, float)) for i in data):
            raise ValueError("Data must be a list of numbers.")
        return [round(value / self.quantization_factor) * self.quantization_factor for value in data]

    def declare_space(self, point_id: str, data: List[float]):
        """Declare a new space point with quantized data and add initial context."""
        quantized_data = self.quantize_data(data)
        space_point = SpacePoint(point_id, quantized_data)
        space_point.add_to_enclosed_space("Initialized with quantized data")
        self.space_points[point_id] = space_point

    def get_space(self, point_id: str) -> Optional[SpacePoint]:
        """Retrieve the specified space point."""
        return self.space_points.get(point_id)

    def analyze_data(self, space_point: SpacePoint) -> Optional[Dict[str, float]]:
        """Analyze the data from the given space point and return results."""
        if not space_point.data:
            return None
        
        space_point.add_to_enclosed_space("Performing data analysis")
        
        return {
            'average': sum(space_point.data) / len(space_point.data),
            'max': max(space_point.data),
            'min': min(space_point.data)
        }

    def correlate_data(self, analysis_results: Dict[str, float]) -> Dict[str, Dict[str, str]]:
        """Correlate analysis results with materials and motions."""
        return self.correlation_module.correlate(analysis_results)

    def perform_operations(self, analysis_results: Dict[str, float]) -> str:
        """Perform operations based on the analysis results."""
        if analysis_results['average'] > 50:
            return "Alert: Average value exceeds threshold!"
        else:
            return "All systems normal."

    def run(self):
        """Main process to run the program."""
        raw_data = self.gather_data()
        if not raw_data:
            print("No valid data available.")
            return
        
        # Declare space with a unique point ID
        point_id = input("Enter a unique point ID for the space point: ")
        self.declare_space(point_id, raw_data)

        # Analyze the newly declared space
        space_point = self.get_space(point_id)
        if space_point:
            analysis_results = self.analyze_data(space_point)
            if analysis_results:
                correlations = self.correlate_data(analysis_results)
                operation_result = self.perform_operations(analysis_results)
                
                # Output the analysis, correlation results, and absolute factoring
                print(f"\nAnalysis Results for '{point_id}': {analysis_results}")
                print(f"Correlations for '{point_id}': {correlations}")
                print(operation_result)
                
                # Print the absolute factoring representation
                print(f"Absolute Factoring Representation: {space_point.factor_data()}")
                print(f"Enclosed Space Context: {space_point.enclosed_space}\n")  # Show the enclosed space context
            else:
                print("No data available for analysis.")
        else:
            print("Space point not found.")


# Example usage
if __name__ == "__main__":
    space_acknowledgement_program = SpaceAcknowledgementProgram(quantization_factor=5)
    space_acknowledgement_program.run()