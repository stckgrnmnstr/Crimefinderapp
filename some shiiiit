import math

class CrimeFinder:
    def __init__(self, space_size):
        self.space_size = space_size
        self.quantized_points = {}
        self.associated_points = []

    def add_point(self, name, point, crime):
        if point in self.quantized_points:
            self.quantized_points[point].append((name, crime))
        else:
            self.quantized_points[point] = [(name, crime)]

    def find_crimes_at_point(self, point):
        if point in self.quantized_points:
            return self.quantized_points[point]
        else:
            return []

    def find_crimes_in_radius(self, center_point, radius):
        crimes = []
        for point in self.quantized_points:
            distance = self.calculate_distance(center_point, point)
            if distance <= radius:
                crimes.extend(self.quantized_points[point])
        return crimes

    def calculate_distance(self, point1, point2):
        # Euclidean distance calculation
        return math.sqrt(sum((a - b) ** 2 for a, b in zip(point1, point2)))

    def confirm_association(self, point1, point2, point3):
        if point1 in self.quantized_points and point2 in self.quantized_points and point3 in self.quantized_points:
            self.associated_points = [point1, point2, point3]
            print("Three quantized points confirmed to be associated in the space.")

    def print_associated_results(self):
        if self.associated_points:
            for point in self.associated_points:
                print(f"Point: {point}")
                print("Associated crimes:")
                for crime in self.quantized_points[point]:
                    print(f"- Name: {crime[0]}, Crime: {crime[1]}")
        else:
            print("No associated points confirmed yet.")

    def recognize_space(self, point):
        # Use a simple check for now, you may implement a more sophisticated space recognition algorithm
        if point[0] >= 0 and point[0] <= self.space_size[0] and point[1] >= 0 and point[1] <= self.space_size[1]:
            print("Point is within the recognized space.")
        else:
            print("Point is outside the recognized space.")

    def associate_description(self, point, description):
        # Placeholder for associating quantized points with descriptions using OpenAI and ChatGPT/Google Gemini
        pass

    def out(self, depth_string):
        # Placeholder for converting a depth string into a more detailed description value string
        pass

    def readout(self):
        if self.associated_points:
            for point in self.associated_points:
                print(f"Point: {point}")
                print("Associated crimes:")
                for crime in self.quantized_points[point]:
                    print(f"- Name: {crime[0]}, Crime: {crime[1]}")
                # Print concise and in-depth quantized descriptions
                concise_description = self.associate_description(point, "concise")
                in_depth_description = self.associate_description(point, "in-depth")
                print(f"Concise Description: {concise_description}")
                print(f"In-Depth Description: {in_depth_description}")
        else:
            print("No associated points confirmed yet.")


# Example usage:
crime_finder = CrimeFinder(space_size=(1000, 1000))
crime_finder.add_point("John Doe", (50, 50), "Theft")
crime_finder.add_point("Jane Smith", (70, 70), "Assault")
crime_finder.add_point("Alice Johnson", (90, 90), "Vandalism")

crime_finder.confirm_association((50, 50), (70, 70), (90, 90))
crime_finder.readout()

# Test space recognition
crime_finder.recognize_space((800, 800))  # Example point outside recognized space
crime_finder.recognize_space((300, 300))  # Example point within recognized space